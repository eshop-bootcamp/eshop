buildscript {
    ext {
        springBootVersion = '1.4.2.RELEASE'
        jacocoCoverage = '0.4.0'
        liquibasePluginVersion = '1.2.1'
        mysqlJavaConnectorVersion = '5.1.36'
    }
    repositories {
        mavenCentral()

        maven {
            url "https://plugins.gradle.org/m2/"
        }

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.palantir:jacoco-coverage:${jacocoCoverage}")
        classpath("org.liquibase:liquibase-gradle-plugin:${liquibasePluginVersion}")
        classpath("mysql:mysql-connector-java:${mysqlJavaConnectorVersion}")
        classpath("com.h2database:h2:1.4.193")
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.palantir.jacoco-coverage'
apply plugin: 'com.palantir.jacoco-full-report'
apply plugin: 'org.liquibase.gradle'

jar {
    baseName = 'eshop'
    version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {

    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('com.google.guava:guava:20.0')
    runtime('mysql:mysql-connector-java')
    compile('org.springframework.boot:spring-boot-starter-test')
    testCompile("com.h2database:h2:1.4.193")
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.5.4'
}

jacoco {
    toolVersion = "0.7.6.201602180812"

}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

jacocoCoverage {
    // Enforce minimum code coverage for every Java file.
    fileThreshold 0.3
    fileThreshold 0.0, "EShopApplication.java"
}

test.dependsOn jacocoFullReport

liquibase {
    activities {
        liquibasemain {
            File propsFile = new File("${project.rootDir}/src/main/resources/liquibase/liquibase.properties")
            Properties properties = new Properties()
            properties.load(new FileInputStream(propsFile))
            changeLogFile "${project.rootDir}/src/main/resources/liquibase/db-changelog-master.xml"
            url properties['url']
            username properties['username']
            password properties['password']
        }
        liquibaseintegration {
            println "def"
            File propsFile = new File("${project.rootDir}/src/main/resources/liquibase/liquibase.integration.properties")
            Properties properties = new Properties()
            properties.load(new FileInputStream(propsFile))
            changeLogFile "${project.rootDir}/src/main/resources/liquibase/db-changelog-master.xml"
            url properties['url']
            username properties['username']
            password properties['password']
        }
    }
    if (project.hasProperty("dbContext") && project.property("dbContext") == 'integrationTest') {
        println "abc"
        runList = 'liquibaseintegration'
    } else {
        runList = 'liquibasemain'
    }
}

task migrateDatabase() {
    doLast {
        println "Database migrated successfully"
    }
}
migrateDatabase.dependsOn update




