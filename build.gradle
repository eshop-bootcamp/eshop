buildscript {
    ext {
        springBootVersion = '1.4.2.RELEASE'
        jacocoCoverage = '0.4.0'
        liquibasePluginVersion = '1.2.1'
        mysqlJavaConnectorVersion = '5.1.36'
    }
    repositories {
//        ivy {
//            name "GitHb"
//            artifactPattern "http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].[ext]"
//        }
//        add(new org.apache.ivy.plugins.resolver.URLResolver()) {
//            name = 'GitHub'
//            addArtifactPattern 'http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].[ext]'
//        }
        mavenCentral()


        maven {
            url "https://plugins.gradle.org/m2/"
        }

    }
    dependencies {
//        classpath("jamescarr:h2-gradle-plugin:0.8.2")
        classpath("com.bmuschko:gradle-tomcat-plugin:2.2.2")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.palantir:jacoco-coverage:${jacocoCoverage}")
        classpath("org.liquibase:liquibase-gradle-plugin:${liquibasePluginVersion}")
        classpath("mysql:mysql-connector-java:${mysqlJavaConnectorVersion}")
        classpath("com.h2database:h2:1.4.193")
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.palantir.jacoco-coverage'
apply plugin: 'com.palantir.jacoco-full-report'
apply plugin: 'org.liquibase.gradle'
//apply plugin: 'h2'
jar {
    baseName = 'eshop'
    version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('com.google.guava:guava:20.0')
    runtime('mysql:mysql-connector-java')
    compile('org.springframework.boot:spring-boot-starter-test')
    compile('com.fasterxml.jackson.core:jackson-databind:2.5.4')
    testCompile 'com.jayway.restassured:rest-assured:2.3.0'
    testCompile("com.h2database:h2:1.4.193")
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.5.4'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.5'
}

jacoco {
    toolVersion = "0.7.6.201602180812"

}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

jacocoCoverage {
    // Enforce minimum code coverage for every Java file.
    fileThreshold 0.3
    fileThreshold 0.0, "EShopApplication.java"
    fileThreshold 0.0, "WebSecurityConfiguration.java"
    fileThreshold 0.0, "AuthenticationConfiguration.java"
    fileThreshold 0.0, "AuthController.java"
    fileThreshold 0.0, "WebConfig.java"

    fileThreshold 0.0, "AuthenticationFilter.java"
    fileThreshold 0.0, "TokenService.java"
    fileThreshold 0.0, "AuthorizedUser.java"
    fileThreshold 0.0, "FilterConfiguration.java"
    fileThreshold 0.0, "User.java"
}

//test.dependsOn jacocoFullReport

liquibase {
    activities {
        liquibasemain {
            File propsFile = new File("${project.rootDir}/src/main/resources/liquibase/liquibase.properties")
            Properties properties = new Properties()
            properties.load(new FileInputStream(propsFile))
            changeLogFile "${project.rootDir}/src/main/resources/liquibase/db-changelog-master.xml"
            url properties['url']
            username properties['username']
            password properties['password']
        }
        liquibaseintegration {
            File propsFile = new File("${project.rootDir}/src/main/resources/liquibase/liquibase.integration.properties")
            Properties properties = new Properties()
            properties.load(new FileInputStream(propsFile))
            changeLogFile "${project.rootDir}/src/main/resources/liquibase/db-changelog-master.xml"
            url properties['url']
            username properties['username']
            password properties['password']
        }
    }
    if (project.hasProperty("dbContext") && project.properties.get("dbContext") == 'integrationTest') {
        runList = 'liquibaseintegration'
    } else {
        runList = 'liquibasemain'
    }
}

task migrateDatabase() {
    doLast {
        println "Database migrated successfully"
    }
}
migrateDatabase.dependsOn update

task setIntegrationProperties(){
    project.ext.set("dbContext", "integrationTest")
}
task integrationTest(type: Test, dependsOn: [ 'update']) {
//    project.properties.put("dbContext","integrationTest")
    println project.property("dbContext")
//    doFirst{
//        h2start.execute()
//    }
    include "com/eshop/integration/**"
//    doLast{
//        dropAll.execute()
//    }
}

test{
    exclude "com/eshop/integration/**"
}
//h2stop.shouldRunAfter integrationTest
//setIntegrationParams.mustRunBefore integrationTest
//h2stop.dependsOn update
//update.dependsOn h2start

//h2
//    tcpPort = 9092
//    webPort = 8082
//}